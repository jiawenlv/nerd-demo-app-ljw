generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id     String   @id @default(uuid())
  name   String
  email  String   @unique
  isVip  Boolean  @default(false)
  roles  String[] @default([])
  orders Order[]
}

// 订单表
model Order {
  id         String   @id @default(uuid())
  userId     String
  userName     String
  total      Float
  createdAt  DateTime @default(now())
  couponCode String?
  user       User     @relation(fields: [userId], references: [id])
}

// 员工表
model Staff {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  position String
  salary   Float?
  joinDate DateTime @default(now())
}

// 供应商表
model Supplier {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  status      String    @default("active") // active, inactive
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  purchaseOrders PurchaseOrder[]
  products       Product[]
}

// 客户表
model Customer {
  id        String    @id @default(uuid())
  code      String    @unique
  name      String
  phone     String?
  email     String?
  address   String?
  type      String    @default("retail") // retail, wholesale
  creditLimit Float?   @default(0)
  status    String    @default("active") // active, inactive
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 关联关系
  salesOrders SalesOrder[]
}

// 商品分类表
model Category {
  id        String    @id @default(uuid())
  code      String    @unique
  name      String
  parentId  String?
  level     Int       @default(1)
  status    String    @default("active") // active, inactive
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 关联关系
  parent    Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]
}

// 商品表
model Product {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  description String?
  categoryId  String
  supplierId  String
  unit        String    @default("piece") // piece, kg, box, etc.
  costPrice   Float     @default(0)
  salePrice   Float     @default(0)
  minStock    Float     @default(0)
  maxStock    Float     @default(1000)
  status      String    @default("active") // active, inactive, discontinued
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  category          Category           @relation(fields: [categoryId], references: [id])
  supplier          Supplier           @relation(fields: [supplierId], references: [id])
  stocks            Stock[]
  purchaseOrderItems PurchaseOrderItem[]
  salesOrderItems   SalesOrderItem[]
  stockMovements    StockMovement[]
}

// 仓库表
model Warehouse {
  id        String    @id @default(uuid())
  code      String    @unique
  name      String
  address   String?
  managerId String?
  status    String    @default("active") // active, inactive
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 关联关系
  stocks         Stock[]
  stockMovements StockMovement[]
  purchaseOrders PurchaseOrder[]
  salesOrders    SalesOrder[]
}

// 库存表
model Stock {
  id          String    @id @default(uuid())
  productId   String
  warehouseId String
  quantity    Float     @default(0)
  lockedQty   Float     @default(0) // 锁定数量（待发货等）
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  
  @@unique([productId, warehouseId])
}

// 库存变动记录表
model StockMovement {
  id          String    @id @default(uuid())
  productId   String
  warehouseId String
  type        String    // in, out, transfer, adjust
  quantity    Float     // 正数表示入库，负数表示出库
  beforeQty   Float     // 变动前数量
  afterQty    Float     // 变动后数量
  unitPrice   Float?    // 单价
  totalAmount Float?    // 总金额
  reason      String?   // 变动原因
  refType     String?   // 关联单据类型: purchase_order, sales_order, adjust, transfer
  refId       String?   // 关联单据ID
  operatorId  String?   // 操作员ID
  createdAt   DateTime  @default(now())
  
  // 关联关系
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
}

// 采购订单表
model PurchaseOrder {
  id           String    @id @default(uuid())
  orderNo      String    @unique
  supplierId   String
  warehouseId  String
  orderDate    DateTime  @default(now())
  expectedDate DateTime?
  status       String    @default("pending") // pending, confirmed, received, cancelled
  totalAmount  Float     @default(0)
  paidAmount   Float     @default(0)
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // 关联关系
  supplier  Supplier            @relation(fields: [supplierId], references: [id])
  warehouse Warehouse           @relation(fields: [warehouseId], references: [id])
  items     PurchaseOrderItem[]
}

// 采购订单明细表
model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Float
  unitPrice       Float
  totalPrice      Float
  receivedQty     Float         @default(0)
  
  // 关联关系
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])
}

// 销售订单表
model SalesOrder {
  id           String    @id @default(uuid())
  orderNo      String    @unique
  customerId   String
  warehouseId  String
  orderDate    DateTime  @default(now())
  deliveryDate DateTime?
  status       String    @default("pending") // pending, confirmed, shipped, delivered, cancelled
  totalAmount  Float     @default(0)
  paidAmount   Float     @default(0)
  discount     Float     @default(0)
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // 关联关系
  customer  Customer          @relation(fields: [customerId], references: [id])
  warehouse Warehouse         @relation(fields: [warehouseId], references: [id])
  items     SalesOrderItem[]
}

// 销售订单明细表
model SalesOrderItem {
  id           String     @id @default(uuid())
  salesOrderId String
  productId    String
  quantity     Float
  unitPrice    Float
  totalPrice   Float
  shippedQty   Float      @default(0)
  
  // 关联关系
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])
}
